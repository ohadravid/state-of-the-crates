
mod post {
    //! SeaORM Entity. Generated by sea-orm-codegen 0.3.2
    use sea_orm::entity::prelude::*;
    use serde::{Deserialize, Serialize};
    
    #[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
    #[sea_orm(table_name = "posts")]
    pub struct Model {
        #[sea_orm(primary_key)]
        #[serde(skip_deserializing)]
        pub id: i32,
        pub title: String,
        #[sea_orm(column_type = "Text")]
        pub text: String,
    }

    #[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
    pub enum Relation {}

    impl ActiveModelBehavior for ActiveModel {}
}

use sea_orm::prelude::*;
use sea_orm::Set;


pub async fn update_post_by_id(
    db: &DbConn,
    id: i32,
    post_data: post::Model,
) -> Result<post::Model, DbErr> {
    let post: post::ActiveModel = post::Entity::find_by_id(id)
        .one(db)
        .await?
        .ok_or(DbErr::Custom("Cannot find post.".to_owned()))
        .map(Into::into)?;

    post::ActiveModel {
        id: post.id,
        title: Set(post_data.title.to_owned()),
        text: Set(post_data.text.to_owned()),
    }
    .update(db)
    .await
}